{"ast":null,"code":"import data from './data/Wine-Data.json';\nexport const alcoholList = data.reduce((result, alcohol) => {\n  const alcoholClass = alcohol.Alcohol;\n  if (!result[alcoholClass]) {\n    result[alcoholClass] = [];\n  }\n  result[alcoholClass].push(alcohol);\n  return result;\n}, {});\nexport function getMean(keyprop, index) {\n  let result;\n  Object.entries(alcoholList).map(key => {\n    if (key[0] === keyprop) {\n      let ap = key[1].map(alcohol => {\n        return alcohol.Flavanoids;\n      });\n      result = ap.reduce((result, ap) => {\n        if (ap[0] === \".\") {\n          ap = Number(0 + ap);\n        }\n        result += ap;\n        return result;\n      });\n    }\n  });\n  return result.toFixed(3);\n}\nexport function getMedian(keyprop, index) {\n  let result;\n  Object.entries(alcoholList).map(key => {\n    if (key[0] === keyprop) {\n      let ap = key[1].map(alcohol => {\n        return alcohol.Flavanoids;\n      });\n      let sortedAP = ap.sort((a, b) => a - b);\n      const middleValue = Math.floor(sortedAP.length / 2);\n      if (sortedAP.length % 2 === 0) {\n        result = (sortedAP[middleValue] + sortedAP[middleValue - 1]) / 2;\n      } else {\n        result = sortedAP[middleValue];\n      }\n    }\n  });\n  return result.toFixed(3);\n}\nexport function getMode(keyprop, index) {\n  let result = {};\n  let maximumVal = 0;\n  let count = 0;\n  Object.entries(alcoholList).map(key => {\n    if (key[0] === keyprop) {\n      let ap = key[1].map(alcohol => {\n        return alcohol.Flavanoids;\n      });\n      for (let i = 0; i < ap.length; i++) {\n        const number = ap[i];\n        if (result[number]) {\n          result[number]++;\n        } else {\n          result[number] = 1;\n        }\n        if (count < result[number]) {\n          maximumVal = number;\n          count = result[number];\n        }\n      }\n    }\n  });\n  return maximumVal.toFixed(3);\n}","map":{"version":3,"names":["data","alcoholList","reduce","result","alcohol","alcoholClass","Alcohol","push","getMean","keyprop","index","Object","entries","map","key","ap","Flavanoids","Number","toFixed","getMedian","sortedAP","sort","a","b","middleValue","Math","floor","length","getMode","maximumVal","count","i","number"],"sources":["/Users/asifdeen/assessment/wine_data/src/utils/utils.js"],"sourcesContent":["import data from './data/Wine-Data.json'\n\nexport const alcoholList = data.reduce((result,alcohol)=>{\n    const alcoholClass = alcohol.Alcohol\n    if(!result[alcoholClass]){\n      result[alcoholClass] =[]\n    }\n    result[alcoholClass].push(alcohol)\n    return result\n  },{})\nexport function getMean (keyprop,index){\n    let result\n    Object.entries(alcoholList).map((key)=>{\n      if(key[0]===keyprop){\n        let ap = key[1].map((alcohol)=>{\n          return alcohol.Flavanoids\n        })\n        \n        result = ap.reduce((result,ap)=>{\n          if (ap[0]===\".\"){\n            ap =Number( 0 + ap)\n          }\n          result+=ap\n          return result\n        })\n      }\n      \n    })\n    return result.toFixed(3)\n  }\nexport function getMedian (keyprop,index){\n    let result\n    Object.entries(alcoholList).map((key)=>{\n      if(key[0]===keyprop){\n        let ap = key[1].map((alcohol)=>{\n          return alcohol.Flavanoids\n        })\n        let sortedAP = ap.sort((a,b)=>a-b)\n        const middleValue = Math.floor(sortedAP.length / 2);\n        if(sortedAP.length %2 ===0){\n          result = (sortedAP[middleValue] + sortedAP[middleValue -1])/2\n        } else{\n          result = sortedAP[middleValue];\n        }\n      }\n    })\n    return result.toFixed(3)\n  }\nexport function getMode (keyprop,index){\n    let result = {}\n    let maximumVal =0\n    let count = 0\n    Object.entries(alcoholList).map((key)=>{\n      if(key[0]===keyprop){\n        let ap = key[1].map((alcohol)=>{\n          return alcohol.Flavanoids\n        })\n        for(let i=0;i<ap.length;i++){\n          const number = ap[i]\n          if(result[number]){\n            result[number]++\n          } else{\n            result[number] = 1\n          }\n          if(count < result[number]){\n            maximumVal = number\n            count = result[number];\n          } \n        }\n        \n        \n      }\n    })\n    return maximumVal.toFixed(3)\n  }"],"mappings":"AAAA,OAAOA,IAAI,MAAM,uBAAuB;AAExC,OAAO,MAAMC,WAAW,GAAGD,IAAI,CAACE,MAAM,CAAC,CAACC,MAAM,EAACC,OAAO,KAAG;EACrD,MAAMC,YAAY,GAAGD,OAAO,CAACE,OAAO;EACpC,IAAG,CAACH,MAAM,CAACE,YAAY,CAAC,EAAC;IACvBF,MAAM,CAACE,YAAY,CAAC,GAAE,EAAE;EAC1B;EACAF,MAAM,CAACE,YAAY,CAAC,CAACE,IAAI,CAACH,OAAO,CAAC;EAClC,OAAOD,MAAM;AACf,CAAC,EAAC,CAAC,CAAC,CAAC;AACP,OAAO,SAASK,OAAOA,CAAEC,OAAO,EAACC,KAAK,EAAC;EACnC,IAAIP,MAAM;EACVQ,MAAM,CAACC,OAAO,CAACX,WAAW,CAAC,CAACY,GAAG,CAAEC,GAAG,IAAG;IACrC,IAAGA,GAAG,CAAC,CAAC,CAAC,KAAGL,OAAO,EAAC;MAClB,IAAIM,EAAE,GAAGD,GAAG,CAAC,CAAC,CAAC,CAACD,GAAG,CAAET,OAAO,IAAG;QAC7B,OAAOA,OAAO,CAACY,UAAU;MAC3B,CAAC,CAAC;MAEFb,MAAM,GAAGY,EAAE,CAACb,MAAM,CAAC,CAACC,MAAM,EAACY,EAAE,KAAG;QAC9B,IAAIA,EAAE,CAAC,CAAC,CAAC,KAAG,GAAG,EAAC;UACdA,EAAE,GAAEE,MAAM,CAAE,CAAC,GAAGF,EAAE,CAAC;QACrB;QACAZ,MAAM,IAAEY,EAAE;QACV,OAAOZ,MAAM;MACf,CAAC,CAAC;IACJ;EAEF,CAAC,CAAC;EACF,OAAOA,MAAM,CAACe,OAAO,CAAC,CAAC,CAAC;AAC1B;AACF,OAAO,SAASC,SAASA,CAAEV,OAAO,EAACC,KAAK,EAAC;EACrC,IAAIP,MAAM;EACVQ,MAAM,CAACC,OAAO,CAACX,WAAW,CAAC,CAACY,GAAG,CAAEC,GAAG,IAAG;IACrC,IAAGA,GAAG,CAAC,CAAC,CAAC,KAAGL,OAAO,EAAC;MAClB,IAAIM,EAAE,GAAGD,GAAG,CAAC,CAAC,CAAC,CAACD,GAAG,CAAET,OAAO,IAAG;QAC7B,OAAOA,OAAO,CAACY,UAAU;MAC3B,CAAC,CAAC;MACF,IAAII,QAAQ,GAAGL,EAAE,CAACM,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAGD,CAAC,GAACC,CAAC,CAAC;MAClC,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACN,QAAQ,CAACO,MAAM,GAAG,CAAC,CAAC;MACnD,IAAGP,QAAQ,CAACO,MAAM,GAAE,CAAC,KAAI,CAAC,EAAC;QACzBxB,MAAM,GAAG,CAACiB,QAAQ,CAACI,WAAW,CAAC,GAAGJ,QAAQ,CAACI,WAAW,GAAE,CAAC,CAAC,IAAE,CAAC;MAC/D,CAAC,MAAK;QACJrB,MAAM,GAAGiB,QAAQ,CAACI,WAAW,CAAC;MAChC;IACF;EACF,CAAC,CAAC;EACF,OAAOrB,MAAM,CAACe,OAAO,CAAC,CAAC,CAAC;AAC1B;AACF,OAAO,SAASU,OAAOA,CAAEnB,OAAO,EAACC,KAAK,EAAC;EACnC,IAAIP,MAAM,GAAG,CAAC,CAAC;EACf,IAAI0B,UAAU,GAAE,CAAC;EACjB,IAAIC,KAAK,GAAG,CAAC;EACbnB,MAAM,CAACC,OAAO,CAACX,WAAW,CAAC,CAACY,GAAG,CAAEC,GAAG,IAAG;IACrC,IAAGA,GAAG,CAAC,CAAC,CAAC,KAAGL,OAAO,EAAC;MAClB,IAAIM,EAAE,GAAGD,GAAG,CAAC,CAAC,CAAC,CAACD,GAAG,CAAET,OAAO,IAAG;QAC7B,OAAOA,OAAO,CAACY,UAAU;MAC3B,CAAC,CAAC;MACF,KAAI,IAAIe,CAAC,GAAC,CAAC,EAACA,CAAC,GAAChB,EAAE,CAACY,MAAM,EAACI,CAAC,EAAE,EAAC;QAC1B,MAAMC,MAAM,GAAGjB,EAAE,CAACgB,CAAC,CAAC;QACpB,IAAG5B,MAAM,CAAC6B,MAAM,CAAC,EAAC;UAChB7B,MAAM,CAAC6B,MAAM,CAAC,EAAE;QAClB,CAAC,MAAK;UACJ7B,MAAM,CAAC6B,MAAM,CAAC,GAAG,CAAC;QACpB;QACA,IAAGF,KAAK,GAAG3B,MAAM,CAAC6B,MAAM,CAAC,EAAC;UACxBH,UAAU,GAAGG,MAAM;UACnBF,KAAK,GAAG3B,MAAM,CAAC6B,MAAM,CAAC;QACxB;MACF;IAGF;EACF,CAAC,CAAC;EACF,OAAOH,UAAU,CAACX,OAAO,CAAC,CAAC,CAAC;AAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}